#include <iostream>
#include <vector>
#include <array>

using namespace std;

/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

                                            Triangle    P_{3,n}=n(n+1)/2    1, 3, 6, 10, 15, ...
                                            Square      P_{4,n}=n^2         1, 4, 9, 16, 25, ...
                                            Pentagonal  P_{5,n}=n(3n-1)/2   1, 5, 12, 22, 35, ...
                                            Hexagonal   P_{6,n}=n(2n-1)     1, 6, 15, 28, 45, ...
                                            Heptagonal  P_{7,n}=n(5n-3)/2   1, 7, 18, 34, 55, ...
                                            Octagonal   P_{8,n}=n(3n-2)     1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    2. Each polygonal type: triangle (P_{3,127}=8128), square (P_{4,91}=8281), and pentagonal (P_{5,44}=2882), is represented by a different number in the set.
    3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

Answer:
*/

/*
Thoughts:
From 044 and 045, we know that

    T_n+1   = T_n + n + 1
    P_n+1   = P_n + 3n + 1
    Hex_n+1 = Hex_n + 4n + 1

The others:

    S_n+1   =   (n+1)^2
            =   n^2 + 2n + 1
            =   S_n + 2n + 1
    (easier and optimize to just do n+1 then n*n)

    Hep_n+1 =   (n+1)(5(n+1) - 3)/2
            =   (5(n+1)^2 - 3(n+1))/2
            =   (5(n^2 + 2n + 1) - 3(n+1))/2
            =   (5n^2 + 10n + 5 - 3n - 3)/2
            =   (5n^2 - 3n)/2 + (10n + 5 - 3)/2
            =   n(5n - 3)/2 + (10n + 2)/2
            =   Hep_n + (10n + 2)/2
            =   Hep_n + 5n + 1

    O_n+1   =   (n+1)(3(n+1) - 2)
            =   3(n+1)^2 - 2(n+1)
            =   3(n^2 + 2n + 1) - 2(n+1)
            =   3n^2 + 6n + 3 - 2n - 2
            =   3n^2 - 2n + 6n + 1
            =   n(3n - 2) + 6n + 1
            =   O_n + 6n + 1

In the end, we have

    T_n+1   = T_n   +  n + 1
    S_n+1   = S_n   + 2n + 1
    P_n+1   = P_n   + 3n + 1
    Hex_n+1 = Hex_n + 4n + 1
    Hep_n+1 = Hep_n + 5n + 1
    O_n+1   = O_n   + 6n + 1

*/
void ProjectEuler061(){
    vector<unsigned> triangles = {0};
    vector<unsigned> squares = {0};
    vector<unsigned> pentagonals = {0};
    vector<unsigned> hexagonals = {0};
    vector<unsigned> heptagonals = {0};
    vector<unsigned> octogonals = {0};

    unsigned n = 0;
    while(true){
        unsigned nextT = *triangles.rbegin() + n + 1;
        unsigned nextS = *squares.rbegin() + 2*n + 1;
        unsigned nextP = *pentagonals.rbegin() + 3*n + 1;
        unsigned nextHex = *hexagonals.rbegin() + 4*n + 1;
        unsigned nextHep = *heptagonals.rbegin() + 5*n + 1;
        unsigned nextO = *octogonals.rbegin() + 6*n + 1;
        n++;

        if(nextT < 1000){
            triangles[0] = nextT;
        } else {
            if(nextT > 10000){
                // It will break at 10000 = n(n+1)/2 -> n ~= 141, thus way later than 10000 = n^2 -> n = 100
                break;
            }

            triangles.push_back(nextT);
        }

        if(nextS < 1000){
            squares[0] = nextS;
        } else {
            if(nextS < 10000){
                squares.push_back(nextS);
            }
        }

        if(nextP < 1000){
            pentagonals[0] = nextP;
        } else {
            if(nextP < 10000){
                pentagonals.push_back(nextP);
            }
        }

        if(nextHex < 1000){
            hexagonals[0] = nextHex;
        } else {
            if(nextHex < 10000){
                hexagonals.push_back(nextHex);
            }
        }

        if(nextHep < 1000){
            heptagonals[0] = nextHep;
        } else {
            if(nextHep < 10000){
                heptagonals.push_back(nextHep);
            }
        }

        if(nextO < 1000){
            octogonals[0] = nextO;
        } else {
            if(nextO < 10000){
                octogonals.push_back(nextO);
            }
        }
    }
}
