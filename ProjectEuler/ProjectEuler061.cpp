#include <iostream>
#include <vector>

using namespace std;

/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

                                            Triangle    P_{3,n}=n(n+1)/2    1, 3, 6, 10, 15, ...
                                            Square      P_{4,n}=n^2         1, 4, 9, 16, 25, ...
                                            Pentagonal  P_{5,n}=n(3n-1)/2   1, 5, 12, 22, 35, ...
                                            Hexagonal   P_{6,n}=n(2n-1)     1, 6, 15, 28, 45, ...
                                            Heptagonal  P_{7,n}=n(5n-3)/2   1, 7, 18, 34, 55, ...
                                            Octagonal   P_{8,n}=n(3n-2)     1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

    1. The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
    2. Each polygonal type: triangle (P_{3,127}=8128), square (P_{4,91}=8281), and pentagonal (P_{5,44}=2882), is represented by a different number in the set.
    3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

Answer: 28684 (3.323ms)
*/

unsigned Triangle(unsigned n){
    return n*(n+1)/2;
}

unsigned Square(unsigned n){
    return n*n;
}

unsigned Pentagonal(unsigned n){
    return n*(3*n-1)/2;
}

unsigned Hexagonal(unsigned n){
    return n*(2*n-1);
}

unsigned Heptagonal(unsigned n){
    return n*(5*n-3)/2;
}

unsigned Octagonal(unsigned n){
    return n*(3*n-2);
}

enum class FigurateType : unsigned char {
    Triangle = 1,
    Square = 2,
    Pentagonal = 4,
    Hexagonal = 8,
    Heptagonal = 16,
    Octagonal = 32
};

struct Node {
    unsigned char type = 0;
    unsigned prefix = 0;
    unsigned suffix = 0;

    vector<const Node*> nexts = {};
};

void BuildLinks(vector<Node>& graph){
    for(Node& current: graph){
        for(Node& other: graph){
            if(current.type == other.type){
                continue;
            }

            if(current.prefix == other.suffix){
                other.nexts.push_back(&current);
            }

            if(other.prefix == current.suffix){
                current.nexts.push_back(&other);
            }
        }
    }
}

bool Browse(const Node* node, const unsigned char cycle, const unsigned char firstPrefix, unsigned& sum){
    constexpr unsigned char fullCycle = 1 + 2 + 4 + 8 + 16 + 32;
    if(cycle == fullCycle && node->suffix == firstPrefix){
        return true;
    }

    for(const Node* next: node->nexts){
        if((next->type & cycle) == 0){ // didn't encounter this figurate type on the cycle
            if(Browse(next, cycle + next->type, firstPrefix, sum)){
                sum += next->suffix + 100*next->prefix;
                return true;
            }
        }
    }

    return false;
}

void ProjectEuler061(){
    vector<Node> graph = {};

    unsigned n = 0;
    unsigned Pn = 0;
    while(true){
        Pn = Triangle(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Triangle), Pn/100, Pn%100};
        graph.push_back(node);
    }

    n = 0;
    while(true){
        Pn = Square(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Square), Pn/100, Pn%100};
        graph.push_back(node);
    }

    n = 0;
    while(true){
        Pn = Pentagonal(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Pentagonal), Pn/100, Pn%100};
        graph.push_back(node);
    }

    n = 0;
    while(true){
        Pn = Hexagonal(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Hexagonal), Pn/100, Pn%100};
        graph.push_back(node);
    }

    n = 0;
    while(true){
        Pn = Heptagonal(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Heptagonal), Pn/100, Pn%100};
        graph.push_back(node);
    }

    n = 0;
    while(true){
        Pn = Octagonal(n++);
        if(Pn < 1000){
            continue;
        }

        if(Pn > 9999){
            break;
        }

        Node node = {static_cast<unsigned char>(FigurateType::Octagonal), Pn/100, Pn%100};
        graph.push_back(node);
    }

    BuildLinks(graph);

    unsigned sum = 0;
    for(const Node& node : graph){
        if(Browse(&node, node.type, node.prefix, sum)){
            sum += (node.prefix * 100 + node.suffix);
            cout << sum << "\n";
            return;
        }
    }
}
